<?php
require_once(realpath(dirname(__FILE__) . "/constants.php"));

ini_set("memory_limit", "2048M");
ini_set('max_execution_time', 300);

function connectCPB($db = 'compbrowser') {
	$mysqli = new mysqli(CPB_HOST, CPB_USER, CPB_PASS);
	if($mysqli->connect_errno) {
		die("Connect failed:" . $mysqli->connect_error);
	}
	if(!$mysqli->select_db($mysqli->real_escape_string($db))) {
		error_log("(ConnectCPB) DB does not exist: " . $db);
		die();
	}
	return $mysqli;
}

function connectCPBWriter($db) {
	$mysqli = new mysqli(CPB_EDIT_HOST, CPB_EDIT_USER, CPB_EDIT_PASS);
	if($mysqli->connect_errno) {
		die("Connect failed:" . $mysqli->connect_error);
	}
	if(!$mysqli->select_db($mysqli->real_escape_string($db))) {
		error_log("(ConnectCPBWriter) DB does not exist: " . $db);
		die();
	}
	return $mysqli;
}

function requestSpeciesHgsID($spc) {
	// this is to request the hgsID from the session (if any)
	// if there is no such thing, then use $_SESSION['ID'] to populate a fake one
	// however, still need to be posted after the real one is generated by UCSC
	if(!isset($_SESSION['hgsIDs'])) {
		$_SESSION['hgsIDs'] = array();
	}
	if(!isset($_SESSION['hgsIDs'][$spc])) {
		$_SESSION['hgsIDs'][$spc] = $_SESSION['ID'] * 10 + 1 + count($_SESSION['hgsIDs']);
	}
	return $_SESSION['hgsIDs'][$spc];
}
function byteSwap32($data) {
	$arr = unpack("V", pack("N", $data));
	return $arr[1];
}

function cmpTwoBits($aHigh, $aLow, $bHigh, $bLow) {
	// return -1 if b < a, 0 if equal, +1 else
	if($aHigh < $bHigh) {
		return 1;
	} else if($aHigh > $bHigh) {
		return -1;
	} else {
		return (($aLow < $bLow)? 1: (($aLow > $bLow)? -1: 0));
	}
}

function rangeIntersection($start1, $end1, $start2, $end2) {
	$s = max($start1, $start2);
	$e = min($end1, $end2);
	return $e - $s;
}

function getRequest() {
	if(isset($_SERVER['CONTENT_TYPE'])) {
		switch(explode('; ', strtolower($_SERVER['CONTENT_TYPE']), 2)[0]) {
			case 'application/json':
				return json_decode(file_get_contents('php://input'), true);
			case 'application/x-www-form-urlencoded':
			case 'multipart/form-data':
				return $_REQUEST;
			default:
				error_log('Content-type not recognized: get \'' . $_SERVER['CONTENT_TYPE'] . '\'');
				return file_get_contents('php://input');
		}
	} else {
		return $_REQUEST;
	}
}

function var_error_log( $object = NULL ){
    ob_start();                    // start buffer capture
    var_dump( $object );           // dump the values
    error_log(ob_get_contents());// end capture and put stuff to error_log
	ob_end_clean();
}
